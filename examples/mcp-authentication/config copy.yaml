# yaml-language-server: $schema=../../schema/local.json
binds:
- listeners:
  - routes:
## ==========================================================
## Scenario 2: agentgateway acts solely as a resource server
## (Authentication Server works out of band)
##
## In this scenario agentgateway:
## 1. Exposes protected resource metadata (on behalf of the mcp server)
## 2. Validates token against the AS jwks
## 3. Rejects traffic without access token and sets WWW-Authentication header
##
## NOTE: No routes for oauth-authorization-server or client-registration
## ==========================================================
    - backends:
      - mcp:
          targets:
          - name: everything
            stdio:
              args:
              - '@modelcontextprotocol/server-everything'
              cmd: npx
      matches:
      - path:
          exact: /stdio/mcp
      - path:
          exact: /.well-known/oauth-protected-resource/stdio/mcp
      policies:
        cors:
          allowHeaders:
          - mcp-protocol-version
          - content-type
          allowOrigins:
          - '*'
        mcpAuthentication:
          issuer: http://localhost:9000
          jwksUrl: http://localhost:9000/.well-known/jwks.json
          resourceMetadata:
            resource: http://localhost:3000/stdio/mcp
            scopesSupported:
            - read:all
            bearerMethodsSupported:
            - header
            - body
            - query
            resourceDocumentation: http://localhost:3000/stdio/docs
            resourcePolicyUri: http://localhost:3000/stdio/policies

## ==========================================================
## Remote server: Backend and MCP Authentication
## ==========================================================
    - backends:
      - mcp:
          targets:
          - mcp:
              host: mcpbin.is.solo.io
              path: /remote/mcp
              port: 443
            name: mcpbin
      matches:
      - path:
          exact: /remote/mcp
      - path:
          exact: /.well-known/oauth-protected-resource/remote/mcp
      policies:
        backendTLS: {}
        cors:
          allowHeaders:
          - mcp-protocol-version
          - content-type
          allowOrigins:
          - '*'
        mcpAuthentication:

          mode: strict
          issuer: http://localhost:9000
          jwksUrl: http://localhost:9000/.well-known/jwks.json
          resourceMetadata:
            resource: http://localhost:3000/remote/mcp
            scopesSupported:
            - offline_access
            bearerMethodsSupported:
            - header
            - body
            - query
            resourceDocumentation: http://localhost:3000/remote/docs
            resourcePolicyUri: http://localhost:3000/remote/policies

  port: 3000

# ==========================================================
# Scenario 1: agentgateway adapts traffic for Authorization Servers
# (e.g., Keycloak that doesn't implement standards as-is)

# In this scenario agentgateway:
# 1. Exposes protected resource metadata (on behalf of the mcp server)
# 2. Proxies to the Authorization Server Metadata endpoint
# 3. Proxies and adapts traffic to the Authorization Server for client registration
# 4. Validates token against the AS jwks
# 5. Rejects traffic without access token and sets WWW-Authentication header
# ==========================================================

# Example configuration for Keycloak:

- listeners:
  - routes:
    - backends:
      - mcp:
          targets:
          - name: everything
            stdio:
              args:
              - '@modelcontextprotocol/server-everything'
              cmd: npx
      matches:
      - path:
          exact: /keycloak/mcp
      - path:
          exact: /.well-known/oauth-protected-resource/keycloak/mcp
      - path:
          exact: /.well-known/oauth-authorization-server
      - path:
          exact: /client-registration
      policies:
        cors:
          allowHeaders:
          - mcp-protocol-version
          - content-type
          allowOrigins:
          - '*'
        mcpAuthentication:
          mode: strict
          issuer: http://localhost:7080/realms/mcp
          jwksUrl: http://localhost:7080/realms/mcp/protocol/openid-connect/certs
          provider:
            keycloak: {}
          resourceMetadata:
            resource: http://localhost:3000/keycloak/mcp
            scopesSupported:
            - offline_access
            bearerMethodsSupported:
            - header
            - body
            - query
            resourceDocumentation: http://localhost:3000/keycloak/docs
            resourcePolicyUri: http://localhost:3000/keycloak/policies
  port: 3000
